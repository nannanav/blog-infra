name: CI/CD Pipeline

on:
  # schedule:
    # - cron: '0 0 * * *'  # Nightly build at midnight UTC
  workflow_dispatch:      # Manual trigger option

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.detect_changes.outputs.changed_services }}
      service_versions: ${{ steps.current_versions.outputs.service_versions }}
    steps:
      - name: Checkout the infra repo
        uses: actions/checkout@v4

      - name: Checkout the source repo
        uses: actions/checkout@v4
        with:
          repository: nannanav/blog-platform
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: blog-platform
          fetch-depth: 0  # Get full history for comparisons

      - name: Detect changes since last nightly build
        id: detect_changes
        run: |
          cd blog-platform
          
          # Find tag of last nightly build
          LAST_NIGHTLY_TAG=$(git describe --tags --match "nightly-*" --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_NIGHTLY_TAG" ]; then
            echo "No previous nightly tag found. Considering all services as changed."
            echo "changed_services=user-service,post-service,frontend,comment-service" >> $GITHUB_OUTPUT
          else
            echo "Last nightly build tag: $LAST_NIGHTLY_TAG"
            
            # Check each service for changes
            CHANGED_SERVICES=()
            services=("user-service" "post-service" "frontend" "comment-service")
            
            for service in "${services[@]}"; do
              if git diff --name-only $LAST_NIGHTLY_TAG HEAD -- "$service/" | grep -q .; then
                CHANGED_SERVICES+=("$service")
                echo "$service has changes since last nightly build"
              else
                echo "$service has no changes since last nightly build"
              fi
            done
            
            # Set output with comma-separated list of changed services
            if [ ${#CHANGED_SERVICES[@]} -gt 0 ]; then
              echo "changed_services=$(IFS=,; echo "${CHANGED_SERVICES[*]}")" >> $GITHUB_OUTPUT
            else
              echo "changed_services=" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Create new nightly tag using epoch time (seconds since Unix epoch)
          NIGHTLY_TAG="nightly-$(date +'%Y%m%d-%H%M%S')"
          git tag "$NIGHTLY_TAG"
          git push origin "$NIGHTLY_TAG"

      - name: Get current version numbers
        id: current_versions
        run: |
          cd blog-platform
          
          services=("user-service" "post-service" "frontend" "comment-service")
          
          # Create a JSON object to store all service versions
          VERSION_JSON="{}"
          
          for service in "${services[@]}"; do
            # Get latest stable version from ECR
            LATEST_VERSION=$(aws ecr describe-images \
              --repository-name blog-platform/$service \
              --query 'imageDetails[?imageTags && contains(imageTags, `stable`)].[imageTags]' \
              --region us-east-1 \
              --output json | jq -r '.[][][]' | grep -v "stable" | sort -V | tail -n 1 || echo "1.0.0")
            
            # If no version found, default to 1.0.0
            if [ -z "$LATEST_VERSION" ]; then
              echo "no version found. Defaulting to 1.0.0"
              LATEST_VERSION="1.0.0"
            fi
            
            # Check if there are changes since last QA image
            LATEST_QA_TAG=$(aws ecr describe-images \
              --repository-name blog-platform/$service \
              --query 'imageDetails[?imageTags && contains(imageTags, `latest-qa`)].[imageTags]' \
              --region us-east-1 \
              --output json | jq -r '.[][][]' | grep -v "latest-qa" | sort -V | tail -n 1 || echo "")
              
            # If no changes for this service, mark it to be skipped
            if [[ -z "${{ steps.detect_changes.outputs.changed_services }}" ]] || ! echo "${{ steps.detect_changes.outputs.changed_services }}" | grep -q "$service"; then
              echo "No changes detected for $service, skipping version bump"
              VERSION_JSON=$(echo $VERSION_JSON | jq --arg svc "$service" --arg val "skip" '. + {($svc): $val}')
              continue
            fi
            
            # Look at commit messages to determine version bump type
            LAST_STABLE_TAG=$(git describe --tags --match "$service-v*" --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_STABLE_TAG" ]; then
              # No previous tag, default to patch bump
              echo "No previous tag, default to patch bump"
              BUMP_TYPE="patch"
            else
              # Check commit messages for bump type keywords
              if git log $LAST_STABLE_TAG..HEAD --grep="major" -i | grep -q .; then
                BUMP_TYPE="major"
              elif git log $LAST_STABLE_TAG..HEAD --grep="minor" -i | grep -q .; then
                BUMP_TYPE="minor"
              else
                BUMP_TYPE="patch"
              fi
            fi
            
            # Parse current version components
            MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
            MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
            PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
            
            # Bump version according to commit messages
            if [ "$BUMP_TYPE" == "major" ]; then
              NEW_VERSION="$((MAJOR + 1)).0.0"
              echo "$service: Bumping MAJOR version from $LATEST_VERSION to $NEW_VERSION"
            elif [ "$BUMP_TYPE" == "minor" ]; then
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              echo "$service: Bumping MINOR version from $LATEST_VERSION to $NEW_VERSION"
            else
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              echo "$service: Bumping PATCH version from $LATEST_VERSION to $NEW_VERSION"
            fi
            
            # Add version to JSON object
            VERSION_JSON=$(echo $VERSION_JSON | jq --arg svc "$service" --arg val "$NEW_VERSION" '. + {($svc): $val}')
          done
          
          # Set output for use in later jobs
          echo "service_versions=$(echo $VERSION_JSON | jq -c .)" >> $GITHUB_OUTPUT

  docker-build-push:
    needs: versioning
    runs-on: ubuntu-latest
    outputs:
      image_versions: ${{ steps.store_versions.outputs.image_versions }}
    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4

      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          repository: nannanav/blog-platform
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: blog-platform

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker images for updated services
        id: store_versions
        run: |
          # Get list of changed services
          IFS=',' read -r -a CHANGED_SERVICES <<< "${{ needs.versioning.outputs.changed_services }}"
          
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "No services have changes. Skipping build and push."
            # Create empty JSON for output
            echo "image_versions={}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Parse the service versions JSON
          SERVICE_VERSIONS='${{ needs.versioning.outputs.service_versions }}'
          
          # Create a JSON object to store all image versions
          IMAGE_VERSIONS="{}"
          
          for service in "${CHANGED_SERVICES[@]}"; do
            echo "Building and pushing $service"
            
            # Extract version for this service from the JSON
            VERSION=$(echo $SERVICE_VERSIONS | jq -r --arg svc "$service" '.[$svc]')
            
            # Skip if marked to skip
            if [[ "$VERSION" == "skip" ]]; then
              echo "Skipping $service as it has no changes since the last QA image"
              
              # Get current latest-qa tag for this service
              CURRENT_QA_VERSION=$(aws ecr describe-images \
                --repository-name blog-platform/$service \
                --query 'imageDetails[?imageTags && contains(imageTags, `latest-qa`)].[imageTags]' \
                --output text | grep -v "latest-qa" | sort -V | tail -n 1 || echo "1.0.0-qa")
              
              # Store in the JSON
              IMAGE_VERSIONS=$(echo $IMAGE_VERSIONS | jq --arg svc "$service" --arg val "$CURRENT_QA_VERSION" '. + {($svc): $val}')
              continue
            fi
            
            # Build and push Docker image for arm64
            docker buildx build --platform linux/arm64 \
              --push \
              -t ${{ secrets.ECR_URL }}/blog-platform/$service:${VERSION}-qa \
              -t ${{ secrets.ECR_URL }}/blog-platform/$service:latest-qa \
              -f blog-platform/$service/Dockerfile blog-platform/$service
            
            # Store version in JSON
            IMAGE_VERSIONS=$(echo $IMAGE_VERSIONS | jq --arg svc "$service" --arg val "${VERSION}-qa" '. + {($svc): $val}')
          done
          
          # Set output for use in later jobs
          echo "image_versions=$(echo $IMAGE_VERSIONS | jq -c .)" >> $GITHUB_OUTPUT

  trigger-deploy:
    needs: [docker-build-push]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Deploy Workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_ACCESS_TOKEN }}
          script: |
            // Get changed services from docker-build-push job outputs
            // Parse from the image_versions object
            const imageVersionsObj = JSON.parse('${{ needs.docker-build-push.outputs.image_versions }}');
            const changedServices = Object.keys(imageVersionsObj);
            
            console.log('Changed services:', changedServices);
            
            // Prepare deploy info structure
            const deployInfoObj = {
              images: imageVersionsObj,
              changed_services: changedServices
            };
            
            // Convert to string for input
            const deployInfo = JSON.stringify(deployInfoObj);
            
            // Trigger the deploy workflow for QA environment
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'update-manifests.yml',
              ref: context.ref,
              inputs: {
                environment: 'qa',
                deploy_info: deployInfo
              }
            });
            
            console.log('Triggered deployment to QA environment');
