name: Promote Service

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Source environment to promote from (qa/uat)'
        required: true
        type: choice
        options:
          - qa
          - uat
      service:
        description: 'Service to promote (select "all" to promote all services)'
        required: true
        type: choice
        options:
          - frontend
          - post-service
          - user-service
          - comment-service
          - all

jobs:
  promote:
    runs-on: ubuntu-latest
    env:
      # Set default values to avoid empty variable issues
      TARGET_ENV: "not-set"
      SOURCE_TAG_SUFFIX: "not-set"
      TARGET_TAG_SUFFIX: "not-set"
    
    steps:
      # Step 1: Determine target environment & tag suffixes
      - name: Set target environment variables
        run: |
          SOURCE_ENV="${{ github.event.inputs.environment }}"
          
          if [ "$SOURCE_ENV" == "qa" ]; then
            echo "TARGET_ENV=uat" >> $GITHUB_ENV
            echo "SOURCE_TAG_SUFFIX=qa" >> $GITHUB_ENV
            echo "TARGET_TAG_SUFFIX=rc" >> $GITHUB_ENV
          elif [ "$SOURCE_ENV" == "uat" ]; then
            echo "TARGET_ENV=prod" >> $GITHUB_ENV
            echo "SOURCE_TAG_SUFFIX=rc" >> $GITHUB_ENV
            echo "TARGET_TAG_SUFFIX=" >> $GITHUB_ENV
          else
            echo "Error: Invalid source environment: $SOURCE_ENV"
            exit 1
          fi
      
      # Step 2: Verify variables are set correctly
      - name: Verify environment variables
        run: |
          echo "Source environment: ${{ github.event.inputs.environment }}"
          echo "Target environment: ${{ env.TARGET_ENV }}"
          echo "Source tag suffix: ${{ env.SOURCE_TAG_SUFFIX }}"
          echo "Target tag suffix: ${{ env.TARGET_TAG_SUFFIX }}"
          
          # Double-check that variables are set
          if [ "${{ env.TARGET_ENV }}" == "not-set" ]; then
            echo "Error: TARGET_ENV is not set correctly"
            exit 1
          fi

      # Step 3: Configure AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Login to ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Promote image(s) - supports both single service and all services
      - name: Promote service images
        id: promote-images
        run: |
          # Service info
          SERVICE_CHOICE="${{ github.event.inputs.service }}"
          SOURCE_ENV="${{ github.event.inputs.environment }}"
          TARGET_ENV="${{ env.TARGET_ENV }}"
          SOURCE_TAG_SUFFIX="${{ env.SOURCE_TAG_SUFFIX }}"
          TARGET_TAG_SUFFIX="${{ env.TARGET_TAG_SUFFIX }}"
          
          # Determine which services to promote
          if [ "$SERVICE_CHOICE" == "all" ]; then
            SERVICES=("frontend" "post-service" "user-service" "comment-service")
            echo "Promoting ALL services from $SOURCE_ENV to $TARGET_ENV"
          else
            SERVICES=("$SERVICE_CHOICE")
            echo "Promoting service $SERVICE_CHOICE from $SOURCE_ENV to $TARGET_ENV"
          fi
          
          # Initialize empty JSON for promoted versions
          PROMOTED_VERSIONS="{}"
          PROMOTED_SERVICES=()
          
          # Process each service
          for SERVICE in "${SERVICES[@]}"; do
            echo "-------------------------------------------"
            echo "Processing service: $SERVICE"
            
            # Find the latest versioned image with the right tag suffix
            SOURCE_IMAGE=$(aws ecr describe-images \
              --repository-name blog-platform/$SERVICE \
              --query "imageDetails[?imageTags && contains(imageTags, \`latest-${SOURCE_TAG_SUFFIX}\`)].[imageTags, imageDigest]" \
              --output json | jq -r '.[0][0][] | select(contains("latest-'${SOURCE_TAG_SUFFIX}'") | not) | select(contains("-'${SOURCE_TAG_SUFFIX}'"))' | sort -V | tail -n 1)
            
            if [ -z "$SOURCE_IMAGE" ]; then
              echo "Warning: Could not find source image for $SERVICE in $SOURCE_ENV, skipping"
              continue
            fi
            
            # Get core version without environment suffix
            VERSION=$(echo $SOURCE_IMAGE | sed "s/-${SOURCE_TAG_SUFFIX}//")
            echo "Found source image: $SOURCE_IMAGE (core version: $VERSION)"
            
            # Get the image digest for reliable referencing
            IMAGE_DIGEST=$(aws ecr describe-images \
              --repository-name blog-platform/$SERVICE \
              --query "imageDetails[?imageTags && contains(imageTags, \`${SOURCE_IMAGE}\`)].imageDigest" \
              --output text)
            
            if [ -z "$IMAGE_DIGEST" ]; then
              echo "Warning: Could not find image digest for $SERVICE, skipping"
              continue
            fi
            
            # Create target tags based on target environment
            ECR_URL="${{ secrets.ECR_URL }}"
            SOURCE_URI="${ECR_URL}/blog-platform/${SERVICE}@${IMAGE_DIGEST}"
            
            # Set proper tags based on target environment
            if [ "$TARGET_ENV" == "prod" ]; then
              # Production tags
              TARGET_TAGS=("$VERSION" "latest" "stable")
              DEPLOY_VERSION="$VERSION"
            else
              # UAT tags
              TARGET_TAGS=("${VERSION}-${TARGET_TAG_SUFFIX}" "latest-${TARGET_TAG_SUFFIX}")
              DEPLOY_VERSION="${VERSION}-${TARGET_TAG_SUFFIX}"
            fi
            
            # Pull the source image
            docker pull --platform=linux/arm64 $SOURCE_URI
            
            # Tag and push with all appropriate tags
            for TARGET_TAG in "${TARGET_TAGS[@]}"; do
              TARGET_URI="${ECR_URL}/blog-platform/${SERVICE}:${TARGET_TAG}"
              echo "Tagging and pushing: $TARGET_URI"
              
              docker tag $SOURCE_URI $TARGET_URI
              docker push $TARGET_URI
            done
            
            # Add to promoted services
            PROMOTED_SERVICES+=("$SERVICE")
            
            # Add to JSON of promoted versions
            PROMOTED_VERSIONS=$(echo $PROMOTED_VERSIONS | jq --arg svc "$SERVICE" --arg ver "$DEPLOY_VERSION" '. + {($svc): $ver}')
            
            echo "Successfully promoted $SERVICE from $SOURCE_ENV to $TARGET_ENV with version $DEPLOY_VERSION"
            echo "-------------------------------------------"
          done
          
          # Convert promoted services array to comma-separated string
          SERVICES_CSV=$(IFS=,; echo "${PROMOTED_SERVICES[*]}")
          
          # Set outputs for next steps
          echo "PROMOTED_VERSIONS=$PROMOTED_VERSIONS" >> $GITHUB_ENV
          echo "PROMOTED_SERVICES=$SERVICES_CSV" >> $GITHUB_ENV
          
          # Summary
          echo "Summary of promotion:"
          echo "From: $SOURCE_ENV to $TARGET_ENV"
          echo "Services promoted: $SERVICES_CSV"
          echo "Versions: $PROMOTED_VERSIONS"
          
          # Check if any services were successfully promoted
          if [ ${#PROMOTED_SERVICES[@]} -eq 0 ]; then
            echo "Error: No services were successfully promoted"
            exit 1
          fi

      # Step 6: Verify variables for deployment
      - name: Prepare for deployment
        run: |
          echo "Source environment: ${{ github.event.inputs.environment }}"
          echo "Target environment: ${{ env.TARGET_ENV }}"
          echo "Promoted services: ${{ env.PROMOTED_SERVICES }}"
          echo "Promoted versions: ${{ env.PROMOTED_VERSIONS }}"
          
          if [ -z "${{ env.PROMOTED_SERVICES }}" ]; then
            echo "Error: No services were promoted"
            exit 1
          fi

      # Step 7: Trigger deployment workflow
      - name: Trigger deployment workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_ACCESS_TOKEN }}
          script: |
            // Access environment variables directly
            const targetEnv = process.env.TARGET_ENV;
            const promotedVersions = JSON.parse(process.env.PROMOTED_VERSIONS);
            const promotedServices = process.env.PROMOTED_SERVICES.split(',');
            
            console.log(`Deploying to ${targetEnv}: ${promotedServices.join(', ')}`);
            
            // Create the deploy info object
            const deployInfo = {
              images: promotedVersions,
              changed_services: promotedServices
            };
            
            // Trigger the deployment workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: context.ref,
              inputs: {
                environment: targetEnv,
                deploy_info: JSON.stringify(deployInfo)
              }
            });
            
            console.log(`Successfully triggered deployment to ${targetEnv} for ${promotedServices.length} services`);